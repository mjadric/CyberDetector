import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Bell, AlertTriangle, ShieldAlert, Clock } from "lucide-react";

interface Alert {
  id: number;
  time: string;
  type: string;
  severity: string;
  message: string;
  source_ip?: string;
  action_taken?: string;
}

interface RecentAlertsProps {
  alerts: Alert[];
}

export default function RecentAlerts({ alerts }: RecentAlertsProps) {
  const getSeverityColor = (severity: string) => {
    switch (severity.toLowerCase()) {
      case "high":
        return "bg-red-500 text-white";
      case "medium":
        return "bg-yellow-500 text-white";
      case "low":
        return "bg-blue-500 text-white";
      default:
        return "bg-slate-500 text-white";
    }
  };
  
  const getTypeIcon = (type: string) => {
    if (type.includes("Entropy") || type.includes("Anomaly")) {
      return <AlertTriangle className="h-4 w-4" />;
    } else if (type.includes("Attack") || type.includes("Flood")) {
      return <ShieldAlert className="h-4 w-4" />;
    } else {
      return <Bell className="h-4 w-4" />;
    }
  };
  
  return (
    <Card>
      <CardHeader>
        <CardTitle className="flex items-center">
          <Bell className="h-5 w-5 mr-2" />
          Recent Detection Alerts
        </CardTitle>
        <CardDescription>
          Latest alerts generated by the detection system
        </CardDescription>
      </CardHeader>
      
      <CardContent>
        <div className="space-y-4">
          {alerts.length > 0 ? (
            alerts.map((alert) => (
              <div key={alert.id} className="p-3 border border-border rounded-lg">
                <div className="flex justify-between items-start mb-2">
                  <div className="flex items-center">
                    {getTypeIcon(alert.type)}
                    <span className="ml-2 font-medium text-sm">{alert.type}</span>
                  </div>
                  <Badge className={getSeverityColor(alert.severity)}>
                    {alert.severity}
                  </Badge>
                </div>
                
                <p className="text-sm mb-2">{alert.message}</p>
                
                <div className="flex justify-between text-xs text-muted-foreground">
                  <div className="flex items-center">
                    <Clock className="h-3 w-3 mr-1" />
                    {alert.time}
                  </div>
                  
                  {alert.source_ip && (
                    <div>Source: {alert.source_ip}</div>
                  )}
                  
                  {alert.action_taken && (
                    <div>Action: {alert.action_taken}</div>
                  )}
                </div>
              </div>
            ))
          ) : (
            <div className="text-center p-8 text-muted-foreground">
              No alerts to display
            </div>
          )}
        </div>
      </CardContent>
    </Card>
  );
}