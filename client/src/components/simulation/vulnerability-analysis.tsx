import { Card } from "@/components/ui/card";
import { Progress } from "@/components/ui/progress";
import { Button } from "@/components/ui/button";
import { getPercentageColor } from "@/lib/utils";

interface CentralityMetric {
  name: string;
  value: number;
}

interface AttackPath {
  probability: number;
  paths: string[];
}

interface Community {
  name: string;
  nodeCount: number;
  risk: 'low' | 'medium' | 'high';
}

interface VulnerabilityAnalysisProps {
  data: {
    centrality: CentralityMetric[];
    attackPath: AttackPath;
    communities: Community[];
  };
}

export default function VulnerabilityAnalysis({ data }: VulnerabilityAnalysisProps) {
  return (
    <Card className="p-4">
      <div className="flex justify-between items-center mb-4">
        <h3 className="font-semibold">Vulnerability Graph Analysis</h3>
        <Button 
          variant="secondary" 
          size="sm"
          className="text-xs"
        >
          View Details
        </Button>
      </div>
      <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
        <div className="bg-secondary p-3 rounded-lg">
          <h4 className="text-sm font-medium mb-2">Centrality Metrics</h4>
          <div className="space-y-2 text-xs">
            {data.centrality.map((metric, index) => (
              <div key={index}>
                <div className="flex justify-between mb-1">
                  <span className="text-muted-foreground">{metric.name}</span>
                  <span>{metric.value.toFixed(2)}</span>
                </div>
                <div className="w-full bg-secondary-foreground/20 rounded-full h-1.5">
                  <div 
                    className={`${getPercentageColor(metric.value * 100)} h-1.5 rounded-full`} 
                    style={{ width: `${metric.value * 100}%` }}
                  ></div>
                </div>
              </div>
            ))}
          </div>
        </div>
        
        <div className="bg-secondary p-3 rounded-lg">
          <h4 className="text-sm font-medium mb-2">Attack Path Analysis</h4>
          <div className="text-xs">
            <p className="text-muted-foreground mb-2">Critical paths identified:</p>
            <div className="space-y-2">
              {data.attackPath.paths.map((path, index) => (
                <div key={index} className="p-2 bg-secondary-foreground/10 rounded font-mono">
                  {path}
                </div>
              ))}
            </div>
            <p className="text-muted-foreground mt-2">
              Path vulnerability probability: <span className="text-[#EF4444]">{(data.attackPath.probability * 100).toFixed(0)}%</span>
            </p>
          </div>
        </div>
        
        <div className="bg-secondary p-3 rounded-lg">
          <h4 className="text-sm font-medium mb-2">Community Detection</h4>
          <div className="text-xs">
            <p className="text-muted-foreground mb-2">Detected vulnerability clusters:</p>
            <div className="space-y-1">
              {data.communities.map((community, index) => (
                <div key={index} className="flex items-center justify-between">
                  <div className="flex items-center">
                    <span className={`w-3 h-3 rounded-full bg-${community.risk === 'high' ? '[#EF4444]' : community.risk === 'medium' ? '[#F59E0B]' : '[#3B82F6]'} mr-1`}></span>
                    <span>{community.name}</span>
                  </div>
                  <span className="text-muted-foreground">{community.nodeCount} nodes</span>
                </div>
              ))}
            </div>
          </div>
        </div>
      </div>
    </Card>
  );
}
